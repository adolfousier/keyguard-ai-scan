
import { useState, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Skeleton } from "@/components/ui/skeleton";
import { ApiKeyFinding } from "@/types/scan";
import { AIRecommendationService } from "@/lib/ai-recommendations";
import { Brain, Copy, Check, RefreshCw } from "lucide-react";
import ReactMarkdown from "react-markdown";

interface AIRecommendationsProps {
  findings: ApiKeyFinding[];
  url: string;
}

export const AIRecommendations = ({ findings, url }: AIRecommendationsProps) => {
  const [recommendations, setRecommendations] = useState<string>('');
  const [loading, setLoading] = useState(true);
  const [copied, setCopied] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const aiService = new AIRecommendationService();

  const loadRecommendations = async () => {
    setLoading(true);
    setError(null);
    
    try {
      const formattedFindings = findings.map(f => ({
        type: f.type,
        severity: f.severity,
        description: f.description,
        location: f.location
      }));

      const result = await aiService.getRecommendations({
        findings: formattedFindings,
        url
      });
      
      setRecommendations(result);
    } catch (err) {
      setError('Failed to generate AI recommendations. Please try again.');
      console.error('AI recommendations error:', err);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadRecommendations();
  }, [findings, url]);

  const copyToClipboard = async () => {
    try {
      await navigator.clipboard.writeText(recommendations);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (err) {
      console.error('Failed to copy:', err);
    }
  };

  if (loading) {
    return (
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center space-x-2">
            <Brain className="h-6 w-6 text-purple-600 animate-pulse" />
            <span>AI Security Recommendations</span>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-3">
            <Skeleton className="h-4 w-full" />
            <Skeleton className="h-4 w-3/4" />
            <Skeleton className="h-4 w-1/2" />
            <Skeleton className="h-20 w-full" />
            <Skeleton className="h-4 w-2/3" />
          </div>
          <div className="text-center mt-4">
            <p className="text-sm text-gray-500">Generating intelligent security recommendations...</p>
          </div>
        </CardContent>
      </Card>
    );
  }

  if (error) {
    return (
      <Card className="border-red-200">
        <CardHeader>
          <CardTitle className="flex items-center space-x-2 text-red-600">
            <Brain className="h-6 w-6" />
            <span>AI Recommendations Error</span>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <p className="text-red-600 mb-4">{error}</p>
          <Button onClick={loadRecommendations} variant="outline">
            <RefreshCw className="h-4 w-4 mr-2" />
            Retry
          </Button>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className="border-purple-200">
      <CardHeader>
        <div className="flex items-center justify-between">
          <CardTitle className="flex items-center space-x-2">
            <Brain className="h-6 w-6 text-purple-600" />
            <span>AI Security Recommendations</span>
          </CardTitle>
          <div className="flex space-x-2">
            <Button 
              variant="outline" 
              size="sm" 
              onClick={copyToClipboard}
              disabled={copied}
            >
              {copied ? (
                <>
                  <Check className="h-4 w-4 mr-2" />
                  Copied
                </>
              ) : (
                <>
                  <Copy className="h-4 w-4 mr-2" />
                  Copy
                </>
              )}
            </Button>
            <Button variant="outline" size="sm" onClick={loadRecommendations}>
              <RefreshCw className="h-4 w-4 mr-2" />
              Refresh
            </Button>
          </div>
        </div>
      </CardHeader>
      <CardContent>
        <div className="prose prose-sm max-w-none">
          <div className="bg-gradient-to-r from-purple-50 to-blue-50 p-4 rounded-lg mb-4">
            <p className="text-sm text-purple-700 font-medium mb-2">
              ðŸ¤– AI-Powered Analysis
            </p>
            <p className="text-sm text-gray-600">
              These recommendations are generated by advanced AI to help you secure your application. 
              Review each suggestion carefully and adapt them to your specific environment.
            </p>
          </div>
          
          <div className="markdown-content">
            <ReactMarkdown
              components={{
                h1: ({node, ...props}) => <h1 className="text-2xl font-bold text-gray-900 mb-4 border-b pb-2" {...props} />,
                h2: ({node, ...props}) => <h2 className="text-xl font-semibold text-gray-800 mb-3 mt-6" {...props} />,
                h3: ({node, ...props}) => <h3 className="text-lg font-medium text-gray-700 mb-2 mt-4" {...props} />,
                p: ({node, ...props}) => <p className="text-gray-600 mb-3 leading-relaxed" {...props} />,
                ul: ({node, ...props}) => <ul className="list-disc list-inside mb-4 space-y-1" {...props} />,
                ol: ({node, ...props}) => <ol className="list-decimal list-inside mb-4 space-y-1" {...props} />,
                li: ({node, ...props}) => <li className="text-gray-600" {...props} />,
                code: ({node, ...props}) => {
                  const isCodeBlock = props.className?.includes('language-');
                  return isCodeBlock ? (
                    <code className="block bg-gray-100 p-3 rounded-lg text-sm font-mono overflow-x-auto" {...props} />
                  ) : (
                    <code className="bg-gray-100 px-1 py-0.5 rounded text-sm font-mono" {...props} />
                  );
                },
                blockquote: ({node, ...props}) => (
                  <blockquote className="border-l-4 border-blue-400 pl-4 py-2 bg-blue-50 rounded-r mb-4" {...props} />
                ),
                strong: ({node, ...props}) => <strong className="font-semibold text-gray-900" {...props} />,
              }}
            >
              {recommendations}
            </ReactMarkdown>
          </div>
        </div>
        
        <div className="mt-6 p-4 bg-gray-50 rounded-lg">
          <p className="text-xs text-gray-500">
            ðŸ’¡ These recommendations are AI-generated and should be reviewed by your security team. 
            KeyGuard AI Scan is not responsible for implementation decisions.
          </p>
        </div>
      </CardContent>
    </Card>
  );
};
