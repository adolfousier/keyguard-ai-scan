import { useState } from "react";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { 
  Download, 
  FileText, 
  FileCode,
  FileSpreadsheet,
  Loader2
} from "lucide-react";
import { ScanResult } from "@/types/scan";
import { analytics } from "@/lib/analytics";
import { toast } from "@/hooks/use-toast";

interface ExportButtonProps {
  result: ScanResult;
  size?: "sm" | "default" | "lg";
  variant?: "default" | "outline" | "secondary" | "ghost";
}

export const ExportButton = ({ result, size = "sm", variant = "outline" }: ExportButtonProps) => {
  const [isExporting, setIsExporting] = useState(false);

  const generateMarkdownReport = (): string => {
    const date = new Date().toLocaleDateString();
    const time = new Date().toLocaleTimeString();
    
    let markdown = `# Security Scan Report

**Generated by:** KeyGuard AI Security Scanner  
**Date:** ${date} at ${time}  
**Target URL:** ${result.url}  
**Scan ID:** ${result.id}  

---

## Executive Summary

${result.summary.total === 0 
  ? "✅ **No security vulnerabilities detected.** The scanned website appears to follow security best practices."
  : `⚠️ **${result.summary.total} security finding${result.summary.total > 1 ? 's' : ''} detected** across the scanned website.`
}

### Findings Breakdown
- **Critical:** ${result.summary.critical} findings
- **High:** ${result.summary.high} findings  
- **Medium:** ${result.summary.medium} findings
- **Low:** ${result.summary.low} findings
- **Total:** ${result.summary.total} findings

---

## Scan Details

- **Target URL:** ${result.url}
- **Scan Started:** ${new Date(result.startTime).toLocaleString()}
${result.endTime ? `- **Scan Completed:** ${new Date(result.endTime).toLocaleString()}` : ''}
- **Total Checks:** ${result.totalChecks}
- **Completed Checks:** ${result.completedChecks}

---
`;

    if (result.findings.length > 0) {
      markdown += `## Security Findings

`;
      
      result.findings.forEach((finding, index) => {
        const severityEmoji = {
          'critical': '🔴',
          'high': '🟠', 
          'medium': '🟡',
          'low': '🔵'
        }[finding.severity] || '⚪';

        markdown += `### ${index + 1}. ${finding.type} ${severityEmoji}

**Severity:** ${finding.severity.toUpperCase()}  
**Description:** ${finding.description}

**Location:** \`${finding.location}\`${finding.lineNumber ? ` (Line ${finding.lineNumber})` : ''}

**Detected Value:**
\`\`\`
${finding.value}
\`\`\`

**Code Context:**
\`\`\`
${finding.context}
\`\`\`

${finding.recommendation ? `**Recommended Action:**
${finding.recommendation}` : ''}

---

`;
      });
    } else {
      markdown += `## No Security Issues Found

Excellent! The security scan did not detect any exposed API Keys & security issues or security vulnerabilities in the scanned website. This indicates that the website follows good security practices.

### What this means:
- No exposed API Keys & security issues were found in client-side code
- No obvious security vulnerabilities detected
- The website appears to handle sensitive data appropriately

### Recommendations for ongoing security:
- Continue regular security scans
- Monitor for new vulnerabilities as the application evolves
- Implement security best practices in development workflow
- Consider periodic penetration testing

`;
    }

    if (result.aiRecommendations) {
      markdown += `## AI Security Analysis

${result.aiRecommendations}

---
`;
    }

    markdown += `## About This Report

This security report was generated by **KeyGuard AI Security Scanner**, an advanced tool that identifies exposed API Keys & security issues and security vulnerabilities in web applications.

### Scan Coverage
- Client-side JavaScript analysis
- HTML content inspection  
- CSS file examination
- Network request monitoring
- ${result.totalChecks} automated security checks

### Important Notes
- This automated scan provides a baseline security assessment
- Manual security review and penetration testing are recommended for comprehensive coverage
- Results should be reviewed by security professionals
- Test all fixes in development environments before production deployment

### Support
For questions about this report or the KeyGuard scanner, visit [keyguard.meetneura.ai](https://keyguard.meetneura.ai)

---

*Report generated on ${new Date().toLocaleString()} by KeyGuard AI Security Scanner*
`;

    return markdown;
  };

  const generateJSONReport = (): string => {
    const reportData = {
      metadata: {
        generatedBy: "KeyGuard AI Security Scanner",
        generatedAt: new Date().toISOString(),
        reportVersion: "1.0",
        scanId: result.id
      },
      scan: {
        targetUrl: result.url,
        startTime: result.startTime,
        endTime: result.endTime,
        status: result.status,
        totalChecks: result.totalChecks,
        completedChecks: result.completedChecks
      },
      summary: result.summary,
      findings: result.findings.map(finding => ({
        id: finding.id,
        type: finding.type,
        severity: finding.severity,
        description: finding.description,
        location: finding.location,
        lineNumber: finding.lineNumber,
        value: finding.value,
        context: finding.context,
        recommendation: finding.recommendation,
        confidence: finding.confidence
      })),
      aiRecommendations: result.aiRecommendations
    };

    return JSON.stringify(reportData, null, 2);
  };

  const generateCSVReport = (): string => {
    if (result.findings.length === 0) {
      return "Status,Message\nSUCCESS,No security vulnerabilities found";
    }

    const headers = [
      "Finding ID",
      "Type", 
      "Severity",
      "Description",
      "Location",
      "Line Number",
      "Detected Value",
      "Code Context",
      "Recommendation",
      "Confidence"
    ];

    const rows = result.findings.map(finding => [
      finding.id,
      finding.type,
      finding.severity,
      `"${finding.description.replace(/"/g, '""')}"`,
      `"${finding.location.replace(/"/g, '""')}"`,
      finding.lineNumber || "",
      `"${finding.value.replace(/"/g, '""')}"`,
      `"${finding.context.replace(/"/g, '""')}"`,
      `"${(finding.recommendation || "").replace(/"/g, '""')}"`,
      finding.confidence
    ]);

    return [headers.join(","), ...rows.map(row => row.join(","))].join("\n");
  };

  const downloadFile = (content: string, filename: string, mimeType: string) => {
    const blob = new Blob([content], { type: mimeType });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  const handleExport = async (format: 'markdown' | 'json' | 'csv') => {
    setIsExporting(true);
    
    try {
      const timestamp = new Date().toISOString().split('T')[0];
      const domain = new URL(result.url).hostname.replace(/[^a-zA-Z0-9]/g, '-');
      
      let content: string;
      let filename: string;
      let mimeType: string;

      switch (format) {
        case 'markdown':
          content = generateMarkdownReport();
          filename = `keyguard-security-report-${domain}-${timestamp}.md`;
          mimeType = 'text/markdown';
          break;
        case 'json':
          content = generateJSONReport();
          filename = `keyguard-security-report-${domain}-${timestamp}.json`;
          mimeType = 'application/json';
          break;
        case 'csv':
          content = generateCSVReport();
          filename = `keyguard-security-findings-${domain}-${timestamp}.csv`;
          mimeType = 'text/csv';
          break;
        default:
          throw new Error('Unsupported format');
      }

      downloadFile(content, filename, mimeType);
      
      analytics.trackResultsExported(format);
      toast({
        title: "Export Successful",
        description: `Report downloaded as ${filename}`,
      });
      
    } catch (error) {
      console.error('Export failed:', error);
      toast({
        title: "Export Failed",
        description: "Unable to generate report. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsExporting(false);
    }
  };

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant={variant} size={size} disabled={isExporting}>
          {isExporting ? (
            <Loader2 className="h-4 w-4 mr-2 animate-spin" />
          ) : (
            <Download className="h-4 w-4 mr-2" />
          )}
          Export
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end" className="w-56">
        <div className="px-2 py-2 border-b">
          <p className="text-sm font-medium text-gray-900 dark:text-white">Export Report</p>
          <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">
            Download security analysis in various formats
          </p>
        </div>

        <DropdownMenuItem 
          onClick={() => handleExport('markdown')} 
          className="cursor-pointer"
          disabled={isExporting}
        >
          <div className="flex items-center space-x-3 w-full">
            <FileText className="h-4 w-4 text-blue-600" />
            <div className="flex-1">
              <span className="text-sm font-medium">Markdown Report</span>
              <p className="text-xs text-gray-500 dark:text-gray-400">
                Comprehensive analysis (.md)
              </p>
            </div>
          </div>
        </DropdownMenuItem>

        <DropdownMenuItem 
          onClick={() => handleExport('json')} 
          className="cursor-pointer"
          disabled={isExporting}
        >
          <div className="flex items-center space-x-3 w-full">
            <FileCode className="h-4 w-4 text-green-600" />
            <div className="flex-1">
              <span className="text-sm font-medium">JSON Data</span>
              <p className="text-xs text-gray-500 dark:text-gray-400">
                Structured data export (.json)
              </p>
            </div>
          </div>
        </DropdownMenuItem>

        <DropdownMenuItem 
          onClick={() => handleExport('csv')} 
          className="cursor-pointer"
          disabled={isExporting}
        >
          <div className="flex items-center space-x-3 w-full">
            <FileSpreadsheet className="h-4 w-4 text-orange-600" />
            <div className="flex-1">
              <span className="text-sm font-medium">CSV Findings</span>
              <p className="text-xs text-gray-500 dark:text-gray-400">
                Findings table (.csv)
              </p>
            </div>
          </div>
        </DropdownMenuItem>

        <div className="px-2 py-2 border-t">
          <p className="text-xs text-gray-500 dark:text-gray-400 text-center">
            {result.summary.total} findings • {result.completedChecks} checks
          </p>
        </div>
      </DropdownMenuContent>
    </DropdownMenu>
  );
};